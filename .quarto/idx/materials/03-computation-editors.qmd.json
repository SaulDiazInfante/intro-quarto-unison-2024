{"title":"Execute code","markdown":{"yaml":{"format":{"revealjs":{"scrollable":false,"slide-number":true,"width":1920,"height":1080,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)","css":["theme/theme.css"],"theme":"simple","echo":true}},"editor":"source"},"headingText":"Execute code","containsRefs":false,"markdown":"\n\n\n[03 - Code and Editors]{style=\"color: white; font-size: 250px;\"}\n\n```{r}\n#| echo: false\nlibrary(countdown)\ncountdown_timer <- function(\n    minutes = 1, \n    play_sound = TRUE, \n    font_size = \"2em\", \n    ...\n) {\n  countdown(\n    minutes = minutes,\n    # Fanfare when it's over\n    play_sound = play_sound,\n    # Set timer theme to match solarized colors\n    color_border              = \"#404041\",\n    color_text                = \"white\",\n    color_background = \"#447099\",\n    color_running_background  = \"#72994E\",\n    color_running_text        = \"white\",\n    color_finished_background = \"#EE6331\",\n    color_finished_text       = \"white\",\n    font_size = font_size,\n    ...\n  )\n}\n```\n\n\n[Code]{style=\"color: white; font-size: 200px;\"}\n\n\n```{r}\n#| include: false\nlibrary(tidyverse)\n```\n\nOne of the biggest similarities AND differences between Quarto and RMarkdown is how it handles native code.\n\n. . .\n\nQuarto uses the `{knitr}` engine just like RMarkdown to execute R code natively, along with many other languages.\n\n. . .\n\nQuarto can _also_ use the Jupyter engine to natively execute Julia, Python, or other languages that Jupyter supports.\n\n::: {.r-stack}\n\n![](images/qmd-knitr.jpg)\n\n![](images/qmd-jupyter.png)\n\n:::\n\n## Choose your engine\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nYou can specify Jupyter to use defaults\n\n```yaml\n---\nengine: jupyter\n---\n```\n\n<br>\n\nOr a specific Python version\n\n```yaml\n---\nengine: python3\n---\n```\n\n<br>\n\nOr even a specific Jupyter Kernel!\n\n```yaml\n---\njupyter: \n  kernelspec:\n    name: \"venvPython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (venv Python)\"\n---\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n:::\n\n::::\n\n## Choose your engine\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nYou can specify Jupyter to use defaults\n\n```yaml\n---\nengine: jupyter\n---\n```\n\n<br>\n\nOr a specific Python version\n\n```yaml\n---\nengine: python3\n---\n```\n\n<br>\n\nOr even a specific Jupyter Kernel!\n\n```yaml\n---\njupyter: \n  kernelspec:\n    name: \"venvPython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (venv Python)\"\n---\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\nIf R code is found first will default to `knitr`\n\n```yaml\n---\nformat: html\n---\n```\n\n<br>\n\nOr can force using `knitr` if you're mixing R/Python content or if your first code chunk is not R.\n\n```yaml\n---\nformat: html\nengine: knitr\n---\n```\n\n:::\n\n::::\n\n## Start your engine!\n\n![](images/howard-speed.gif)\n\n\n## `knitr` code cells\n\nThere's a lot of `knitr` options!\n\n[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-cyl\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\"}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Place engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n\n## Code\n\n```{r}\n# label: example-code-introduction\n#| echo: fenced\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n```\n\n## Code, more than just R\n\n::: columns\n\n::: {.column width=\"50%\"}\n\n```{python}\n#| label: fig-polar\n#| echo: fenced\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](images/polar-axis.png){width=\"650px\"}\n\n:::\n\n:::\n\n## Create code chunks\n\n- You can manually type out code chunks: ```` ```{r} ````\n- the keyboard shortcut <kbd>`Ctrl + Alt + I`</kbd> (OS X: <kbd>`Cmd + Option + I`</kbd>)\n- the Add Chunk command in the editor toolbar\n\n. . .\n\nOr use the Command Palette: <kbd>`Cmd + Shift + P`</kbd>/<kbd>`Ctrl + Shift + P`</kbd>\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-computation/penguin-analysis.qmd`\n- Insert three total code chunks with the shortcut <kbd>`Ctrl + Alt + I`</kbd>\n  - Chunk 1: load `tidyverse` and `palmerpenguins` R packages and print the `penguins` dataset with `glimpse()`\n  - Chunk 2: Create a summary by sex/species of the average and median body weight and bill length\n  - Chunk 3: Create a plot of body mass (x) by bill length (y)\n  - Render it!\n  \n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## Inline code\n\n```{verbatim, lang = \"markdown\"}\nThe mtcars dataset has `r nrow(mtcars)` rows\n```\n\n. . .\n\nThe mtcars dataset has `r nrow(mtcars)` rows\n\n. . .\n\n```{verbatim, lang = \"markdown\"}\nThe mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`\n```\n\n. . .\n\nThe mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`\n\n. . .\n\n```{r}\n#| echo: false\nfmt_mean <- scales::number_format(accuracy = 0.1)(mean(mtcars$mpg))\n```\n\n\n```{verbatim, lang = \"markdown\"}\nfmt_mean <- scales::number_format(accuracy = 0.1, suffix = \" mpg\")(mean(mtcars$mpg))\nThe mtcars dataset has an fuel efficiency of `r fmt_mean`\n```\n\n. . .\n\nThe mtcars dataset has an average miles/per gallon of `r fmt_mean`\n\n\n## Inline code with `Jupyter`\n\nPure Python/Julia Quarto documents via `engine: jupyter` can also do inline code, but this requires the use of [IPython.display.Markdown](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) or the [`Markdown`](https://docs.julialang.org/en/v1/stdlib/Markdown/) package for Julia\n\n\n::: {.panel-tabset}\n\n## Python\n\n````\n```{{python}}\n#| echo: false\nradius = 10\nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"\"\"\nThe radius of the circle is {radius}.\n\"\"\".format(radius = radius)))\n```\n````\n\n## Julia\n\n````\n```{{julia}}\n#| echo: false\nradius = 10\nusing Markdown\nMarkdown.parse(\"\"\"\nThe radius of the circle is $radius.\n\"\"\")\n```\n````\n\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-authoring/inline-code.qmd`\n- Look through the source code, and then render it\n- Check out the appearance and building up of inline code -> inline output\n- Try to add your own new calculations for inline reporting\n\n```{R}\n#| echo: false\ncountdown_timer(4)\n```\n\n## Code chunks options\n\nAll code chunk options at [yihui.org/knitr/options/](https://yihui.org/knitr/options/)\n\n. . .\n\nIf you've used RMarkdown before, you're likely used to:\n\n\n```{r, echo = \"fenced\", eval = TRUE}\nmtcars %>% filter(mpg >= 25)\n```\n\n. . .\n\nQuarto introduces the \"hash pipe\" in `#|`\n\n```{r}\n#| echo: fenced\n#| eval: true\nmtcars %>% filter(mpg >= 25)\n```\n\n## Quarto's hash pipe `#|`\n\n![](images/hash-pipe.gif){width=\"800px\"}\n\n[Weezer - Hash Pipe](https://www.youtube.com/watch?v=_9BGLtqqkVI)\n\n## Quarto chunk options\n\n```{r}\n#| echo: fenced\n#| warning: false\n#| fig-cap: \"Air Quality\"\n#| fig-alt: \"A ggplot2 with temperature by ozone levels along with a trend line indicating the increase in temperature with increasing ozone levels.\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Ozone, Temp)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n\n## RMarkdown vs Quarto\n\nYou _can_ mix and match or use only R Markdown or Quarto style `knitr` options. However, note the difference between 'naming' of the chunk options, typically `one.two` vs `one-two`. The `one.two` exists for backwards compatibility and you should focus on `one-two` syntax.\n\n```\nfig.align vs fig-align\nfig.dpi vs fig-dpi\n```\n\n. . .\n\nThis syntax is preferred because it aligns with Pandoc, which uses `word1-word2` style\n\n. . .\n\n```{r fig.align = \"left\"}\n#| echo: fenced\n#| fig-dpi: 350\nmtcars |> \n  ggplot(aes(x = disp, y = mpg)) + geom_point()\n```\n\n## Quarto chunk options\n\n::: {.callout-note}\n\nNote that if you prefer it is still possible to include chunk options on the first line (e.g. ```` ```{r, echo = FALSE} ````). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines as that syntax only works for backwards compatability with R/RMarkdown.\n\n:::\n\n. . .\n\n> Chunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:\n\n```\n#| fig-cap: !expr paste(\"Air\", \"Quality\")\n```\n\n. . .\n\n## Setup Chunk\n\nA special chunk! There can ONLY be one chunk named `setup`. It typically is used to set up the default values for the **entire document** with `knitr::opts_chunk$set()` and loading global R packages.\n\n. . .\n\n````\n```{{r}}\n#| label: setup\n#| include: false\nknitr::opts_chunk$set(\n  comment = '#>', fig.width = 6, fig.height = 6\n)\n```\n````\n\n. . .\n\nQuarto also introduces some of these as options for `execute:` in YAML, for similar concepts in other languages.\n\n```yaml\n---\nformat: html\nexecute:\n  echo: false\n  warning: false\n---\n```\n\n## `knitr::opts_chunk` defaults\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: true\nstr(knitr::opts_chunk$get()[1:27])\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: true\nstr(knitr::opts_chunk$get()[28:53])\n```\n\n:::\n\n::::\n\n## Code chunks are controllable\n\nSome examples\n\n| Option      | Description |\n| ----------- | ----------- |\n| `fig-height: 4` | Plots generated from this chunk will have a height of 4 inches. |\n| `fig-width: 6` | Plots generated from this chunk will have a width of 6 inches. |\n| `dpi: 150`   | Plots generated will have a dots per inch (pixel density) of 150 |\n| `echo: false` | Code will not be echoed (ie not shown) |\n| `eval: false` | Nothing will be evaluated, but code still be printed |\n| `cache: true` | Results will be cached, and chunk will not be run in subsequent renders, unless code is changed. | \n| `message: false` | No messages will be printed |\n| `warning: false` | No warnings will be printed | \n| `include: false` | No ouputs/echo/messages/etc will be returned | \n\n## There's a lot of options!\n\n[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)\n\n\n## Chunks can be named\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r, echo = FALSE, out.width=\"80%\"}\n#| fig-alt: \"A screenshot of a RMarkdown document inside RStudio. The screenshot highlights the automatically generated document outline for each chunk name.\"\nknitr::include_graphics(\"images/qmd-outline.png\")\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n* Useful for troubleshooting (ie _where_ is the document failing on render)  \n\n```\nlabel: unnamed-chunk-23\n  |..............................|  83%\n  ordinary text without R code\n  |..............................|  85%\nlabel: unnamed-chunk-24 (with options) \nList of 2\n $ fig.dim: num [1:2] 6 4\n $ dpi    : num 150\n  |..............................|  86%\n  ordinary text without R code\n```\n:::\n\n::::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `materials/workshop/broken-notebook`\n- Try to render it, see the errors\n- Fix the errors by finding their named chunks and then render again!\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n\n## Chunk names, good and bad\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n### Good\n\n- `chunk`\n- `myChunk`\n- `my-chunk`\n- `mychunk1`\n\n:::\n\n::: {.column width=\"50%\"}\n### Bad\n\n(These _will_ fail)\n\n- `my_chunk`\n- `my chunk`\n\n:::\n\n::::\n\n## Named chunks can be re-used!\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: myPlt\n#| eval: false\nggplot(mtcars, aes(x = disp, y = mpg, \n    color = factor(cyl))) +\n  geom_point()\n```\n````\n\nNote that you when using **named chunks** you can't alter the internal code, only the chunk options. This is necessary because you are referencing the initially defined code in that chunk.\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n````md\n```{{r}}\n#| label: myPlt\n#| eval: true\n#| dpi: 300\n#| fig-height: 6\n#| fig-width: 4\n```\n````\n\n```{r coolPlot, echo = FALSE, dpi=300, fig.dim = c(6,4)}\nggplot(mtcars, aes(x = disp, y = mpg, color = factor(cyl))) +\n  geom_point()\n```\n\n:::\n\n::::\n\n## Working with code\n\n```{r}\nmtcars |> \n  filter(mpg >= 25)\n```\n\n## Working with code\n\n```{r}\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n```\n\n\n## Working with code\n\n```{r}\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n\nmpg_cars\n```\n\n## Working with code\n\n```{r}\n#| label: mpg-cars\n#| echo: fenced\n#| eval: false\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n\nmpg_cars\n```\n\n## Working with code\n\n````\n```{{r}}\n#| label: mpg-cars\n#| echo: false\n#| eval: true\n```\n````\n\n```{r}\n#| label: mpg-cars\n#| echo: false\n#| eval: true\n```\n\n# {background-image=\"https://d33wubrfki0l68.cloudfront.net/e798975ba0fc742c8e682a62edb0d41e8bf090ac/c620e/blog/rstudio-conf-2022-virtual/thumbnail_hu31b0245616fb8a6872183a9ec865f49c_657330_2220x0_resize_q75_box.jpg\" background-size=\"cover\"}\n\n[Editors]{style=\"color: white; font-size: 150px;\"}\n\n## RStudio, quick intro\n\n- Use R Projects, i.e. a `.RProj` \n- Overview of panes\n- Overview of R Console vs Terminal\n- Overview of Quarto, output inline vs output to pane\n\n## RStudio\n\nRStudio has deep integration with R, `knitr` and Quarto\n\n- Render button\n- Visual Editor\n- Preview of output\n\n. . .\n\nYou should _always_ be using a recent release of the RStudio IDE - especially for the Quarto features. \n\nRStudio `2022.07` and beyond comes bundled with a production-stable release of Quarto, no additional install needed!\n\n## YAML Auto-completion\n\nQuarto + RStudio provides a rich YAML auto-completion based on text.\n\n```yaml\n---\nformat: \n  html:\n    toc-depth: 3\n    #toc-location: body\n---\n\n```\n\n. . .\n\n![](images/yaml-autocomplete.gif){height=50%}\n## YAML Auto-completion\n\nTo find all the available options for a YAML section, you can use <kbd>`Ctrl + Space`</kbd>\n\n![](images/yaml-ctrl.gif)\n\n## `knitr` auto-completion\n\nYou can use tab-completion inside `knitr` chunk options for RMarkdown style or Quarto style as well.\n\n![](images/knitr-autocomplete.gif)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `auto-complete.qmd`\n- Follow instructions in the document\n\n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## RStudio Visual Editor\n\n![](https://quarto.org/docs/visual-editor/images/visual-editing.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-authoring/visual-editor.qmd`\n- Explore the UI elements and visual editor mode\n- Turn Visual Editor mode on/off and explore the sections\n- Render the document and compare the viewer to Visual Mode!\n\n```{R}\n#| echo: false\ncountdown_timer(4)\n```\n\n## VS Code\n\n![](https://quarto.org/docs/tools/images/vscode-render.png)\n\n## VS Code YAML\n\n![](https://quarto.org/docs/tools/images/vscode-raw.png)\n\n## VS Code, YAML Intelligence\n\n![](https://quarto.org/docs/tools/images/vscode-yaml-completion.png)\n\n## Jupyter/Jupyter Lab\n\n![](https://quarto.org/docs/tools/images/jupyter-lab.png)\n\n## Jupyter\n\n`quarto preview notebook.ipynb --to html`\n\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png)\n\n## Jupyter YAML\n\nTreat YAML as a \"raw cell\" in Jupyter - Jupyter doesn't care about YAML, but it's needed/used by Quarto\n\n![](https://quarto.org/docs/tools/images/jupyter-lab-yaml.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n```{py}\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"|1|4|10|14|15\"\nthomasmock$ quarto --help\n\n  Usage:   quarto\n  Version: 1.0.36\n\n  Description:\n    Quarto CLI\n\n  Options:\n    -h, --help     - Show this help.                            \n    -V, --version  - Show the version number for this program.  \n\n  Commands:\n    render          [input] [args...]   - Render input file(s) to various document types.            \n    preview         [file] [args...]    - Render and preview a document or website project.          \n    serve           [input]             - Serve a Shiny interactive document.                        \n    create-project  [dir]               - Create a project for rendering multiple documents          \n    convert         <input>             - Convert documents to alternate representations.            \n    pandoc          [args...]           - Run the version of Pandoc embedded within Quarto.          \n    run             [script] [args...]  - Run a TypeScript, R, Python, or Lua script.                \n    install         <type> [target]     - Installs an extension or global dependency.                \n    publish         [provider] [path]   - Publish a document or project. Available providers include:\n    check           [target]            - Verify correct functioning of Quarto installation.         \n    help            [command]           - Show this help or the help of a sub-command.    \n```\n\n\n","srcMarkdownNoYaml":"\n\n# {background-color=\"black\" background-image=\"images/calculations.jpeg\"}\n\n[03 - Code and Editors]{style=\"color: white; font-size: 250px;\"}\n\n```{r}\n#| echo: false\nlibrary(countdown)\ncountdown_timer <- function(\n    minutes = 1, \n    play_sound = TRUE, \n    font_size = \"2em\", \n    ...\n) {\n  countdown(\n    minutes = minutes,\n    # Fanfare when it's over\n    play_sound = play_sound,\n    # Set timer theme to match solarized colors\n    color_border              = \"#404041\",\n    color_text                = \"white\",\n    color_background = \"#447099\",\n    color_running_background  = \"#72994E\",\n    color_running_text        = \"white\",\n    color_finished_background = \"#EE6331\",\n    color_finished_text       = \"white\",\n    font_size = font_size,\n    ...\n  )\n}\n```\n\n# {background-color=\"#6a9c42\"}\n\n[Code]{style=\"color: white; font-size: 200px;\"}\n\n## Execute code\n\n```{r}\n#| include: false\nlibrary(tidyverse)\n```\n\nOne of the biggest similarities AND differences between Quarto and RMarkdown is how it handles native code.\n\n. . .\n\nQuarto uses the `{knitr}` engine just like RMarkdown to execute R code natively, along with many other languages.\n\n. . .\n\nQuarto can _also_ use the Jupyter engine to natively execute Julia, Python, or other languages that Jupyter supports.\n\n::: {.r-stack}\n\n![](images/qmd-knitr.jpg)\n\n![](images/qmd-jupyter.png)\n\n:::\n\n## Choose your engine\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nYou can specify Jupyter to use defaults\n\n```yaml\n---\nengine: jupyter\n---\n```\n\n<br>\n\nOr a specific Python version\n\n```yaml\n---\nengine: python3\n---\n```\n\n<br>\n\nOr even a specific Jupyter Kernel!\n\n```yaml\n---\njupyter: \n  kernelspec:\n    name: \"venvPython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (venv Python)\"\n---\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n:::\n\n::::\n\n## Choose your engine\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nYou can specify Jupyter to use defaults\n\n```yaml\n---\nengine: jupyter\n---\n```\n\n<br>\n\nOr a specific Python version\n\n```yaml\n---\nengine: python3\n---\n```\n\n<br>\n\nOr even a specific Jupyter Kernel!\n\n```yaml\n---\njupyter: \n  kernelspec:\n    name: \"venvPython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (venv Python)\"\n---\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\nIf R code is found first will default to `knitr`\n\n```yaml\n---\nformat: html\n---\n```\n\n<br>\n\nOr can force using `knitr` if you're mixing R/Python content or if your first code chunk is not R.\n\n```yaml\n---\nformat: html\nengine: knitr\n---\n```\n\n:::\n\n::::\n\n## Start your engine!\n\n![](images/howard-speed.gif)\n\n\n## `knitr` code cells\n\nThere's a lot of `knitr` options!\n\n[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-cyl\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\"}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Place engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n\n## Code\n\n```{r}\n# label: example-code-introduction\n#| echo: fenced\n#| output-location: column\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\"\n)\n```\n\n## Code, more than just R\n\n::: columns\n\n::: {.column width=\"50%\"}\n\n```{python}\n#| label: fig-polar\n#| echo: fenced\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](images/polar-axis.png){width=\"650px\"}\n\n:::\n\n:::\n\n## Create code chunks\n\n- You can manually type out code chunks: ```` ```{r} ````\n- the keyboard shortcut <kbd>`Ctrl + Alt + I`</kbd> (OS X: <kbd>`Cmd + Option + I`</kbd>)\n- the Add Chunk command in the editor toolbar\n\n. . .\n\nOr use the Command Palette: <kbd>`Cmd + Shift + P`</kbd>/<kbd>`Ctrl + Shift + P`</kbd>\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-computation/penguin-analysis.qmd`\n- Insert three total code chunks with the shortcut <kbd>`Ctrl + Alt + I`</kbd>\n  - Chunk 1: load `tidyverse` and `palmerpenguins` R packages and print the `penguins` dataset with `glimpse()`\n  - Chunk 2: Create a summary by sex/species of the average and median body weight and bill length\n  - Chunk 3: Create a plot of body mass (x) by bill length (y)\n  - Render it!\n  \n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## Inline code\n\n```{verbatim, lang = \"markdown\"}\nThe mtcars dataset has `r nrow(mtcars)` rows\n```\n\n. . .\n\nThe mtcars dataset has `r nrow(mtcars)` rows\n\n. . .\n\n```{verbatim, lang = \"markdown\"}\nThe mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`\n```\n\n. . .\n\nThe mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`\n\n. . .\n\n```{r}\n#| echo: false\nfmt_mean <- scales::number_format(accuracy = 0.1)(mean(mtcars$mpg))\n```\n\n\n```{verbatim, lang = \"markdown\"}\nfmt_mean <- scales::number_format(accuracy = 0.1, suffix = \" mpg\")(mean(mtcars$mpg))\nThe mtcars dataset has an fuel efficiency of `r fmt_mean`\n```\n\n. . .\n\nThe mtcars dataset has an average miles/per gallon of `r fmt_mean`\n\n\n## Inline code with `Jupyter`\n\nPure Python/Julia Quarto documents via `engine: jupyter` can also do inline code, but this requires the use of [IPython.display.Markdown](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) or the [`Markdown`](https://docs.julialang.org/en/v1/stdlib/Markdown/) package for Julia\n\n\n::: {.panel-tabset}\n\n## Python\n\n````\n```{{python}}\n#| echo: false\nradius = 10\nfrom IPython.display import display, Markdown\ndisplay(Markdown(\"\"\"\nThe radius of the circle is {radius}.\n\"\"\".format(radius = radius)))\n```\n````\n\n## Julia\n\n````\n```{{julia}}\n#| echo: false\nradius = 10\nusing Markdown\nMarkdown.parse(\"\"\"\nThe radius of the circle is $radius.\n\"\"\")\n```\n````\n\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-authoring/inline-code.qmd`\n- Look through the source code, and then render it\n- Check out the appearance and building up of inline code -> inline output\n- Try to add your own new calculations for inline reporting\n\n```{R}\n#| echo: false\ncountdown_timer(4)\n```\n\n## Code chunks options\n\nAll code chunk options at [yihui.org/knitr/options/](https://yihui.org/knitr/options/)\n\n. . .\n\nIf you've used RMarkdown before, you're likely used to:\n\n\n```{r, echo = \"fenced\", eval = TRUE}\nmtcars %>% filter(mpg >= 25)\n```\n\n. . .\n\nQuarto introduces the \"hash pipe\" in `#|`\n\n```{r}\n#| echo: fenced\n#| eval: true\nmtcars %>% filter(mpg >= 25)\n```\n\n## Quarto's hash pipe `#|`\n\n![](images/hash-pipe.gif){width=\"800px\"}\n\n[Weezer - Hash Pipe](https://www.youtube.com/watch?v=_9BGLtqqkVI)\n\n## Quarto chunk options\n\n```{r}\n#| echo: fenced\n#| warning: false\n#| fig-cap: \"Air Quality\"\n#| fig-alt: \"A ggplot2 with temperature by ozone levels along with a trend line indicating the increase in temperature with increasing ozone levels.\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Ozone, Temp)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n\n## RMarkdown vs Quarto\n\nYou _can_ mix and match or use only R Markdown or Quarto style `knitr` options. However, note the difference between 'naming' of the chunk options, typically `one.two` vs `one-two`. The `one.two` exists for backwards compatibility and you should focus on `one-two` syntax.\n\n```\nfig.align vs fig-align\nfig.dpi vs fig-dpi\n```\n\n. . .\n\nThis syntax is preferred because it aligns with Pandoc, which uses `word1-word2` style\n\n. . .\n\n```{r fig.align = \"left\"}\n#| echo: fenced\n#| fig-dpi: 350\nmtcars |> \n  ggplot(aes(x = disp, y = mpg)) + geom_point()\n```\n\n## Quarto chunk options\n\n::: {.callout-note}\n\nNote that if you prefer it is still possible to include chunk options on the first line (e.g. ```` ```{r, echo = FALSE} ````). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines as that syntax only works for backwards compatability with R/RMarkdown.\n\n:::\n\n. . .\n\n> Chunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:\n\n```\n#| fig-cap: !expr paste(\"Air\", \"Quality\")\n```\n\n. . .\n\n## Setup Chunk\n\nA special chunk! There can ONLY be one chunk named `setup`. It typically is used to set up the default values for the **entire document** with `knitr::opts_chunk$set()` and loading global R packages.\n\n. . .\n\n````\n```{{r}}\n#| label: setup\n#| include: false\nknitr::opts_chunk$set(\n  comment = '#>', fig.width = 6, fig.height = 6\n)\n```\n````\n\n. . .\n\nQuarto also introduces some of these as options for `execute:` in YAML, for similar concepts in other languages.\n\n```yaml\n---\nformat: html\nexecute:\n  echo: false\n  warning: false\n---\n```\n\n## `knitr::opts_chunk` defaults\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: true\nstr(knitr::opts_chunk$get()[1:27])\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: true\nstr(knitr::opts_chunk$get()[28:53])\n```\n\n:::\n\n::::\n\n## Code chunks are controllable\n\nSome examples\n\n| Option      | Description |\n| ----------- | ----------- |\n| `fig-height: 4` | Plots generated from this chunk will have a height of 4 inches. |\n| `fig-width: 6` | Plots generated from this chunk will have a width of 6 inches. |\n| `dpi: 150`   | Plots generated will have a dots per inch (pixel density) of 150 |\n| `echo: false` | Code will not be echoed (ie not shown) |\n| `eval: false` | Nothing will be evaluated, but code still be printed |\n| `cache: true` | Results will be cached, and chunk will not be run in subsequent renders, unless code is changed. | \n| `message: false` | No messages will be printed |\n| `warning: false` | No warnings will be printed | \n| `include: false` | No ouputs/echo/messages/etc will be returned | \n\n## There's a lot of options!\n\n[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)\n\n\n## Chunks can be named\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r, echo = FALSE, out.width=\"80%\"}\n#| fig-alt: \"A screenshot of a RMarkdown document inside RStudio. The screenshot highlights the automatically generated document outline for each chunk name.\"\nknitr::include_graphics(\"images/qmd-outline.png\")\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n* Useful for troubleshooting (ie _where_ is the document failing on render)  \n\n```\nlabel: unnamed-chunk-23\n  |..............................|  83%\n  ordinary text without R code\n  |..............................|  85%\nlabel: unnamed-chunk-24 (with options) \nList of 2\n $ fig.dim: num [1:2] 6 4\n $ dpi    : num 150\n  |..............................|  86%\n  ordinary text without R code\n```\n:::\n\n::::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `materials/workshop/broken-notebook`\n- Try to render it, see the errors\n- Fix the errors by finding their named chunks and then render again!\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n\n## Chunk names, good and bad\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n### Good\n\n- `chunk`\n- `myChunk`\n- `my-chunk`\n- `mychunk1`\n\n:::\n\n::: {.column width=\"50%\"}\n### Bad\n\n(These _will_ fail)\n\n- `my_chunk`\n- `my chunk`\n\n:::\n\n::::\n\n## Named chunks can be re-used!\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: myPlt\n#| eval: false\nggplot(mtcars, aes(x = disp, y = mpg, \n    color = factor(cyl))) +\n  geom_point()\n```\n````\n\nNote that you when using **named chunks** you can't alter the internal code, only the chunk options. This is necessary because you are referencing the initially defined code in that chunk.\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n````md\n```{{r}}\n#| label: myPlt\n#| eval: true\n#| dpi: 300\n#| fig-height: 6\n#| fig-width: 4\n```\n````\n\n```{r coolPlot, echo = FALSE, dpi=300, fig.dim = c(6,4)}\nggplot(mtcars, aes(x = disp, y = mpg, color = factor(cyl))) +\n  geom_point()\n```\n\n:::\n\n::::\n\n## Working with code\n\n```{r}\nmtcars |> \n  filter(mpg >= 25)\n```\n\n## Working with code\n\n```{r}\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n```\n\n\n## Working with code\n\n```{r}\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n\nmpg_cars\n```\n\n## Working with code\n\n```{r}\n#| label: mpg-cars\n#| echo: fenced\n#| eval: false\nmpg_cars <- mtcars |> \n  filter(mpg >= 25)\n\nmpg_cars\n```\n\n## Working with code\n\n````\n```{{r}}\n#| label: mpg-cars\n#| echo: false\n#| eval: true\n```\n````\n\n```{r}\n#| label: mpg-cars\n#| echo: false\n#| eval: true\n```\n\n# {background-image=\"https://d33wubrfki0l68.cloudfront.net/e798975ba0fc742c8e682a62edb0d41e8bf090ac/c620e/blog/rstudio-conf-2022-virtual/thumbnail_hu31b0245616fb8a6872183a9ec865f49c_657330_2220x0_resize_q75_box.jpg\" background-size=\"cover\"}\n\n[Editors]{style=\"color: white; font-size: 150px;\"}\n\n## RStudio, quick intro\n\n- Use R Projects, i.e. a `.RProj` \n- Overview of panes\n- Overview of R Console vs Terminal\n- Overview of Quarto, output inline vs output to pane\n\n## RStudio\n\nRStudio has deep integration with R, `knitr` and Quarto\n\n- Render button\n- Visual Editor\n- Preview of output\n\n. . .\n\nYou should _always_ be using a recent release of the RStudio IDE - especially for the Quarto features. \n\nRStudio `2022.07` and beyond comes bundled with a production-stable release of Quarto, no additional install needed!\n\n## YAML Auto-completion\n\nQuarto + RStudio provides a rich YAML auto-completion based on text.\n\n```yaml\n---\nformat: \n  html:\n    toc-depth: 3\n    #toc-location: body\n---\n\n```\n\n. . .\n\n![](images/yaml-autocomplete.gif){height=50%}\n## YAML Auto-completion\n\nTo find all the available options for a YAML section, you can use <kbd>`Ctrl + Space`</kbd>\n\n![](images/yaml-ctrl.gif)\n\n## `knitr` auto-completion\n\nYou can use tab-completion inside `knitr` chunk options for RMarkdown style or Quarto style as well.\n\n![](images/knitr-autocomplete.gif)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `auto-complete.qmd`\n- Follow instructions in the document\n\n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## RStudio Visual Editor\n\n![](https://quarto.org/docs/visual-editor/images/visual-editing.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open `materials/workshop/03-authoring/visual-editor.qmd`\n- Explore the UI elements and visual editor mode\n- Turn Visual Editor mode on/off and explore the sections\n- Render the document and compare the viewer to Visual Mode!\n\n```{R}\n#| echo: false\ncountdown_timer(4)\n```\n\n## VS Code\n\n![](https://quarto.org/docs/tools/images/vscode-render.png)\n\n## VS Code YAML\n\n![](https://quarto.org/docs/tools/images/vscode-raw.png)\n\n## VS Code, YAML Intelligence\n\n![](https://quarto.org/docs/tools/images/vscode-yaml-completion.png)\n\n## Jupyter/Jupyter Lab\n\n![](https://quarto.org/docs/tools/images/jupyter-lab.png)\n\n## Jupyter\n\n`quarto preview notebook.ipynb --to html`\n\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png)\n\n## Jupyter YAML\n\nTreat YAML as a \"raw cell\" in Jupyter - Jupyter doesn't care about YAML, but it's needed/used by Quarto\n\n![](https://quarto.org/docs/tools/images/jupyter-lab-yaml.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n```{py}\n#| eval: false\n#| echo: true\n#| code-line-numbers: \"|1|4|10|14|15\"\nthomasmock$ quarto --help\n\n  Usage:   quarto\n  Version: 1.0.36\n\n  Description:\n    Quarto CLI\n\n  Options:\n    -h, --help     - Show this help.                            \n    -V, --version  - Show the version number for this program.  \n\n  Commands:\n    render          [input] [args...]   - Render input file(s) to various document types.            \n    preview         [file] [args...]    - Render and preview a document or website project.          \n    serve           [input]             - Serve a Shiny interactive document.                        \n    create-project  [dir]               - Create a project for rendering multiple documents          \n    convert         <input>             - Convert documents to alternate representations.            \n    pandoc          [args...]           - Run the version of Pandoc embedded within Quarto.          \n    run             [script] [args...]  - Run a TypeScript, R, Python, or Lua script.                \n    install         <type> [target]     - Installs an extension or global dependency.                \n    publish         [provider] [path]   - Publish a document or project. Available providers include:\n    check           [target]            - Verify correct functioning of Quarto installation.         \n    help            [command]           - Show this help or the help of a sub-command.    \n```\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","css":["theme/theme.css"],"output-file":"03-computation-editors.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.554","auto-stretch":true,"editor":"source","scrollable":false,"slideNumber":true,"width":1920,"height":1080,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)","theme":"simple"}}},"projectFormats":["html"]}