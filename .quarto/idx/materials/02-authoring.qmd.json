{"title":"02 - Authoring Quarto","markdown":{"yaml":{"format":{"revealjs":{"self-contained":true,"slide-number":true,"width":1920,"height":1080,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)","css":["theme/theme.css"],"theme":"simple"}},"editor":"source","execute":{"echo":true}},"headingText":"02 - Authoring Quarto","headingAttr":{"id":"","classes":[],"keyvalue":[["background-color","#447099"],["background-image","images/typewriter.jpg"],["background-size","cover"]]},"containsRefs":false,"markdown":"\n\n\n```{r}\n#| include: false\nlibrary(countdown)\ncountdown_timer <- function(\n    minutes = 1, \n    play_sound = TRUE, \n    font_size = \"2em\", \n    ...\n) {\n  countdown(\n    minutes = minutes,\n    # Fanfare when it's over\n    play_sound = play_sound,\n    # Set timer theme to match solarized colors\n    color_border              = \"#404041\",\n    color_text                = \"white\",\n    color_background = \"#447099\",\n    color_running_background  = \"#72994E\",\n    color_running_text        = \"white\",\n    color_finished_background = \"#EE6331\",\n    color_finished_text       = \"white\",\n    font_size = font_size,\n    ...\n  )\n}\n```\n\n## Quarto, anatomy\n\n1.  Metadata: YAML\n\n2.  Text: Markdown\n\n3.  Code: `knitr` or `jupyter`\n\n. . .\n\nAdd it all together, and you have beautiful, powerful, and useful outputs!\n\n```{r include=FALSE}\nlibrary(tidyverse)\n```\n\n\n## Literate programming\n\n> Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)\n\n    ---\n    title: \"ggplot2 demo\"\n    date: \"5/22/2021\"\n    format: html\n    ---\n\n    ## Air Quality\n\n    There is a relationship between temperature and the ozone level.\n\n    ```{{r}}\n    #| label: fig-airquality\n    library(ggplot2)\n    ggplot(airquality, aes(Temp, Ozone)) + \n      geom_point() + \n      geom_smooth(method = \"loess\"\n    )\n    ```\n\n. . .\n\n::: {style=\"background: #a13c6530; width: 400px; height: 145px; margin: 5px; position: absolute; top: 245px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #fa551c30; width: 900px; height: 110px; margin: 5px; position: absolute; top: 405px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #6a9c4230; width: 550px; height: 210px; margin: 5px; position: absolute; top: 520px; left: 0px;\"}\n:::\n\n# 1 Metadata {background-color=\"#a13c65\"}\n\n## Metadata: YAML\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\"\n\n``` yaml\n---\nkey: value\n---\n```\n\n## Output Options\n\n``` yaml\n---\nformat: something\n---\n```\n\n. . .\n\n``` yaml\n---\nformat: html\n---\n```\n\n``` yaml\n---\nformat: pdf\n---\n```\n\n``` yaml\n---\nformat: revealjs\n---\n```\n\n. . .\n\nThen add option arguments!\n\n``` yaml\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n. . .\n\nSub-options should be below the main format output and spacing matters!\n\n``` yaml\n---\nformat: \n  html:\n    option1: text\n    option2: logical\n---\n```\n\n## YAML for `format: html`\n\n</iframe>\n\n## YAML is sensitive\n\n``` yaml\n---\nformat:html # invalid, no space between\n---\n\n---\nformat: # invalid, read as missing\nhtml\n---\n\n---\nformat: \n  html: # valid but needs next object\n---\n```\n\n. . .\n\nValid YAML can look a bit differently based on what all is needed\n\n``` yaml\nformat: html # valid - there's a space\n\nformat:\n  html # valid - there's 2x spaces on a new line and no trailing :\n\n# valid - format = HTML with selections made\nformat: \n  html:\n    toc: true\n```\n\n## Why YAML?\n\nTo avoid manually typing out all the options, every time!\n\n. . .\n\n```bash\nquarto render document.qmd --to html\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code-fold:true\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3\n```\n\n# Demo: Navigating within RStudio {background-color=\"black\"}\n\n## Quarto workflow\n\nExecuting the Quarto Render button in RStudio will call Quarto render in a background job - this will prevent Quarto rendering from cluttering up the R console, and gives you and easy way to stop.\n\n![](images/background-job.png)\n\n## Rendering\n\n1. Render in RStudio, starts a background job and previews the output  \n\n![](https://quarto.org/docs/tools/images/rstudio-render.png)\n\n. . .\n\n2. System shell via `quarto render`\n\n```{bash}\n#| eval: false\n#| echo: true\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n\n- Renders via terminal\n\n. . .\n\n3. R console via `quarto` R package\n\n```{r}\n#| eval: false\n#| echo: true\nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `materials/workshop/visual-editor.qmd`\n- Compare behavior of rendering from RStudio > Render, using the CLI with `quarto render`, and in R console via `quarto::quarto_render()`\n\n```{R}\n#| echo: false\n\ncountdown_timer(2)\n```\n\n\n\n## Quarto linting\n\n> Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. - [Lint](https://en.wikipedia.org/wiki/Lint_(software)#:~:text=Lint%2C%20or%20a%20linter%2C%20is,examined%20C%20language%20source%20code.)\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/lint-rstudio.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/lint-vscode.png)\n:::\n:::\n\n## Quarto YAML Intelligence\n\nRStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.\n\n![](images/quarto-tab-complete.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open a new Quarto document in RStudio\n-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options\n-   Try out the tab-completion of any options you remember\n\n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## HTML options\n\n[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)\n\nYou can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) if needed.\n\n# Text & Markdown {background-color=\"#fa551c70\"}\n\n## Lists {.smaller}\n\n+-------------------------------------+---------------------------------+\n| Markdown Syntax                     | Output                          |\n+=====================================+=================================+\n|     * unordered list                | -   unordered list              |\n|         + sub-item 1                |                                 |\n|         + sub-item 2                |     -   sub-item 1              |\n|             - sub-sub-item 1        |                                 |\n|                                     |     -   sub-item 2              |\n|                                     |                                 |\n|                                     |         -   sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     *   item 2                      | -   item 2                      |\n|                                     |                                 |\n|         Continued (indent 4 spaces) |     Continued (indent 4 spaces) |\n+-------------------------------------+---------------------------------+\n|     1. ordered list                 | 1.  ordered list                |\n|     2. item 2                       |                                 |\n|         i) sub-item 1               | 2.  item 2                      |\n|              A.  sub-sub-item 1     |                                 |\n|                                     |     i.  sub-item 1              |\n|                                     |                                 |\n|                                     |         A.  sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     (@)  A list whose numbering     | 1.  A list whose numbering      |\n|                                     |                                 |\n|     continues after                 | continues after                 |\n|                                     |                                 |\n|     (@)  an interruption            | 2.  an interruption             |\n+-------------------------------------+---------------------------------+\n|     term                            | **term**                        |\n|     : definition                    |                                 |\n|                                     | :   definition                  |\n+-------------------------------------+---------------------------------+\n\n## Text Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+---------------------+-----------------+\n| Markdown Syntax     | Output          |\n+=====================+=================+\n|     # Header 1      | # Header 1      |\n+---------------------+-----------------+\n|     ## Header 2     | ## Header 2     |\n+---------------------+-----------------+\n|     ### Header 3    | ### Header 3    |\n+---------------------+-----------------+\n|     #### Header 4   | #### Header 4   |\n+---------------------+-----------------+\n|     ##### Header 5  | ##### Header 5  |\n+---------------------+-----------------+\n|     ###### Header 6 | ###### Header 6 |\n+---------------------+-----------------+\n\n## Links\n\n- There are several types of \"links\" or hyperlinks.\n\n::: columns\n::: {.column width=\"50%\"}\n#### Markdown\n```markdown\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to \n[other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an\ninline image: ![Boston terrier](images/howard-gentleman.jpeg).\n```\n:::\n::: {.column width=\"50%\" .fragment}\n#### Output\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to  [other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an inline image:  \n![Boston terrier](images/howard-gentleman.jpeg){style=\"width:250px;\"}\n:::\n:::\n\n## Tables\n\n::: columns\n::: {.column width=\"50%\"}\n    | Right | Left | Default | Center |\n    |------:|:-----|---------|:------:|\n    |   12  |  12  |    12   |    12  |\n    |  123  |  123 |   123   |   123  |\n    |    1  |    1 |     1   |     1  |\n:::\n\n::: {.column width=\"50%\" .fragment}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n:::\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/markdown-syntax.qmd`\n-   Explore, add to it, try out new syntax, discuss with your neighbor\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Grid tables\n\n    +---------------+---------------+--------------------+\n    | Fruit         | Price         | Advantages         |\n    +===============+===============+====================+\n    | Bananas       | $1.34         | - built-in wrapper |\n    |               |               | - bright color     |\n    +---------------+---------------+--------------------+\n    | Oranges       | $2.10         | - cures scurvy     |\n    |               |               | - tasty            |\n    +---------------+---------------+--------------------+\n\n    : Sample grid table.\n\n+---------------+---------------+----------------------+\n| Fruit         | Price         | Advantages           |\n+===============+===============+======================+\n| Bananas       | \\$1.34        | -   built-in wrapper |\n|               |               | -   bright color     |\n+---------------+---------------+----------------------+\n| Oranges       | \\$2.10        | -   cures scurvy     |\n|               |               | -   tasty            |\n+---------------+---------------+----------------------+\n\n: Sample grid table.\n\n## Grid table, alignment\n\nAlignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:\n\n    +---------------+---------------+--------------------+\n    | Right         | Left          | Centered           |\n    +==============:+:==============+:==================:+\n    | Bananas       | $1.34         | built-in wrapper   |\n    +---------------+---------------+--------------------+\n\nFor headerless tables, the colons go on the top line instead:\n\n    +--------------:+:--------------+:------------------:+\n    | Right         | Left          | Centered           |\n    +---------------+---------------+--------------------+\n\nNote that grid tables are quite awkward to write with a plain text editor (because unlike pipe tables, the column indicators must align). The RStudio IDE's Quarto Visual Editor can assist in making these tables.\n\n## Tables from code\n\n`knitr` itself can turn R dataframes into tables with `knitr::kable()`\n\n> A very simple table generator, and it is simple by design. It is not intended to replace any other R packages for making tables. . . .\n\n```{r}\nhead(mtcars) |> \n  knitr::kable()\n```\n\n\n## Quotes\n\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming ^[\"Literate Programming\", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)]\n\n. . .\n\n```markdown\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming\n```\n\n. . .\n\n> I like dogs  \n> And I like cats\n\n. . .\n\n```markdown\n> I like dogs\n> And I like cats\n```\n\n# Code\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-stuff\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Indicate engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n## Code\n\nThe way you treat code is very different for different contexts\n\n. . .\n\nIn a teaching scenario like today, I *really* want to display code\n\n. . .\n\nIn a business, you may want to have a data-science facing output which displays the source code AND a stakeholder-facing output which hides the code\n\n## Code\n\nIf you simply want code highlighting, you can use 3x backticks + the language ```` ```r ````\n\n. . .\n\n    ```r\n    head(mtcars)\n    ```\n\n. . .\n\n<br> Which returns the below but is not executed since there aren't `{}` around the language:\n\n``` r\nhead(mtcars)\n```\n\n. . .\n\nIf you instead want to see source code and evaluate it, you could use `echo: true` where `echo: false` would instead hide the code but still evaluate it.\n\n    ```{{r}}\n    #| echo: true\n    1 + 1\n    ```\n\n<br>\n\n. . .\n\n```{r}\n#| echo: true\n1 + 1\n```\n\n## Code\n\nIn some scenarios you want to both execute the code and return the FULL code including backticks, like today where I'm teaching! `echo: fenced` is a great option for this.\n\n. . .\n\n    ```{{r}}\n    #| echo: fenced\n    1 + 1\n    ```\n\n. . .\n\n<br>\n\n```{r}\n#| echo: fenced\n1 + 1\n```\n\n## Code\n\nIf you want to, you may return purely decorative code which is not executed\n\n    ````\n    ```{{{r}}}\n    1 + 1\n    ```\n    ````\n\n. . .\n\nRendered as the below and not evaluated:\n\n    ```{{r}}\n    1 + 1\n    ```\n\n. . .\n\nThe general rule here is that if you want to return code verbatim, you need to have at least N + 1 on the backticks. So for a normal 3x backtick chunk... you'll need?\n\n## Divs and Spans\n\nPandoc and therefore Quarto can parse [\"fenced `Div` blocks\"](https://pandoc.org/MANUAL.html#divs-and-spans)\n\n. . .\n\n    ::: {.border}\n    This content can be styled with a border\n    :::\n\n. . .\n\n::: {style=\"border-left:10px solid red\"}\nThis content can be styled with a border\n:::\n\n    This is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nThis is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nYou're not limited to HTML/CSS concepts - Pandoc and Quarto also have \"attributes\" that can be assigned in this way.\n\n### Divs and Spans\n\n-   You can think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF\n-   Similarly, `[text]{.class}` spans can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.\n\n. . .\n\nThe following, if specifying a Quarto class can often apply between formats.\n\n``` code\n::: {.unnumbered .unlisted}\nText\n:::\n```\n\n. . .\n\nWhile the following is hard-coded as HTML.\n\n``` html\n<div style=\"font-size: 200px;\">Text</div>\n```\n\n## Callout Blocks\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including: \n    `note`, `tip`, `warning`, `caution`, and `important`.\n    :::\n\n::: callout-note\n## Note\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n::: callout-warning\n## Warning\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n:::\n\n::: callout-important\n## This is important\n\nDanger, callouts will really improve your writing.\n:::\n\n::: callout-tip\n## Tip with caption\n:::\n\n::: callout-caution\n## Caution, under construction\n\nHere is something under construction\n:::\n\n## Callout markdown syntax\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including:\n    `note`, `warning`, `important`, `tip`, and `caution`.\n    :::\n\n\n    :::{.callout-tip}\n    ## Tip With Caption\n\n    This is an example of a callout with a caption.\n    :::\n\n<br> <br>\n\n    :::{.callout-caution collapse=\"true\"}\n    ## Expand To Learn About Collapse\n\n    This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n    :::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/callout-boxes.qmd`\n-   Try changing the types of callouts/remove them from code boxes and then render\n-   Open `materials/workshop/02-authoring/callout-pdf.qmd` and render it as well\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Figures\n\nBasic markdown syntax:\n\n    ![Boston Terrier](images/boston-terrier.png)\n\n![Boston Terrier](images/boston-terrier.png)\n\n## Figures w/ code\n\n```{r}\n#| echo: fenced\n#| fig-width: 4\n#| fig-align: right\n\nknitr::include_graphics(\"images/howard-gentleman.jpeg\")\n```\n\n## Fragments/spans\n\n::: columns\n::: {.column width=\"50%\"}\n    ![Boston terrier](images/boston-terrier.png){fig-align=\"left\"}\n\n![](images/boston-terrier.png)\n:::\n\n::: {.column width=\"50%\"}\n    ![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n\n![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n:::\n:::\n\n## Subfigures fenced div class\n\n    ::: {#fig-bostons layout-ncol=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    Two states of Howard\n\n    :::\n\n## Subfigures\n\n::: {#fig-bostons layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\nTwo states of Howard\n:::\n\n## Subfigures\n\n<iframe src=\"static/sub-figure.html\" height=\"800px\" width=\"1200px\">\n\n</iframe>\n\n## Paths\n\nQuarto documents reference from their existing folder/directory.\n\n. . .\n\nYou can reference sub-directories/folders easily:\n\n`![](images/image.png)`\n\n. . .\n\nBut what about going \"backwards\" i.e. to a parent directory?\n\nThis specific slide-deck is at `\"get-started-quarto/materials/02-authoring.qmd\"`\n\n. . .\n\nHow to reference a image/file in parent directory i.e. `\"materials/`?\n\n\n## Absolute vs Relative:\n\nIn places like markdown, YAML, or the command line/shell/terminal you'll need to use absolute or relative file paths:\n\n. . .\n\nAbsolute = BAD: `\"/Users/thomasmock/get-started-quarto\"` - who's computer will this work on?\n\n```{r}\nlist.files(\"/Users/thomasmock/get-started-quarto\")\n```\n\n## Relative file paths\n\nBetter, HTML style relative paths: `\"../` = up one directory - `../../` = up two directories and so forth \n\n- `/..` or `/` = start from `root` directory of your current computer\n\n```{r}\nlist.files(\"../\")\n```\n\n. . .\n\n`\"~/get-started-quarto/\"` where \"\\~\" is a shortcut for your home directory (like `thomasmock` on my computer)\n\n```{r}\nlist.files(\"~/get-started-quarto/\")\n```\n\n## Mental Model\n\nWorking left to right (parent to child)\n\n```{r}\nlist.files(\"~/get-started-quarto/materials\")\n```\n\n. . .\n\nWorking right to left (child to parent)\n\n```{r}\nlist.files(\"../materials\")\n```\n\n\n## Referencing paths in R code\n\nIn code you can use `here::here()`:\n\n> The goal of the `here` package is to enable easy file referencing in project-oriented workflows\n\n```{r}\nlist.files(here::here())\n```\n\n`here()` always starts at the top-level directory of a `.RProj`\n\n## `here::here()`\n\n```{r}\nhere::here()\n```\n\n. . .\n\n```{r}\nlist.files(here::here())\n```\n\n\n## `here::here()`\n\n```{r}\nfs::file_info(\"preview.jpeg\") |>  select(1:3)\n```\n\n. . .\n\n```{r}\nfs::file_info(here::here(\"preview.jpeg\")) |>  select(1:3)\n```\n\n. . .\n\n<br>\n\n\n```{r}\nfs::file_info(here::here(\"materials/images/howard-gentleman.jpeg\")) |>  select(1:3)\n```\n\n<br>\n\n```{r}\n# this also works\nfs::file_info(here::here(\"materials\", \"images\", \"howard-gentleman.jpeg\")) |>  select(1:3)\n\n```\n\n\n\n## Navigating in the terminal\n\nBecause Quarto is a command line interface (CLI), there are times you'll need to use it via the terminal. A great overview of using the command line and navigating files/directories is available via the [Data Carpentries](https://datacarpentry.org/shell-genomics/02-the-filesystem/index.html) or a great interactive tool for understanding commands: <https://tldr.ostera.io>\n\n. . .\n\n+------------------------------------+-------------------------------------------------------+\n| Command                            | Action                                                |\n+====================================+=======================================================+\n| `pwd`                              | Print name of current working directory               |\n+------------------------------------+-------------------------------------------------------+\n| `cd`                               | Change current working directory                      |\n+------------------------------------+-------------------------------------------------------+\n| `ls`                               | List directory contents                               |\n+------------------------------------+-------------------------------------------------------+\n| `quarto --help`                    | Return `quarto` help docs                             |\n+------------------------------------+-------------------------------------------------------+\n| `mkdir howdy`                      | Make a new folder/directory called \"howdy\"            |\n+------------------------------------+-------------------------------------------------------+\n| `rm howdy/some-file.qmd` \\| Remove | a file called `some-file.qmd` from the \"howdy\" folder |\n+------------------------------------+-------------------------------------------------------+\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Navigate to a file with the \"cheat code\" <kbd>Ctrl + I</kbd> and then edit\n\n-   Open `materials/workshop/02-authoring/figure-layout.qmd`\n\n-   To reference other directories:\n\n-   Correct the image links:\n\n-   Use `here::here(\"path/to/content\")` in code\n\n-   Use `[](~/ProjectDir/path/to/content)` in markdown\n\n-   Use `../../path/to/content` in YAML or in Markdown\n\n```{R}\n#| echo: false\ncountdown_timer(5)\n```\n\n## Subfigures\n\n    ::: {#fig-bostons layout-nrow=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    :::\n\n## Subfigures\n\n::: {layout-nrow=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n:::\n\nTwo states of Howard, twice\n\n## Subfigures\n\n    ::: {layout-ncol=\"2\"}\n    ![Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    Two states of Howard, twice\n    :::\n\n::: {layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\nTwo states of Howard, twice\n:::\n\n## Figure Divs\n\nNote that the last paragraph in the div block is used as the figure caption.\n\n``` code\n::: {#fig-dog}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U-WQ277UZtY\"></iframe>\n\nFunny boston terrier videos\n:::\n```\n\n::: {#fig-dog-youtube}\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U-WQ277UZtY\">\n\n</iframe>\n\nFunny boston terrier videos\n:::\n\n## Figure Divs\n\n::: {layout-nrow=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n::: {#fig-dog-embed}\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWR9gwxW-4k\">\n\n</iframe>\n\nFunny boston terrier videos\n:::\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/figure-layout-2.qmd`\n-   Try out the various types of subfigures, chahing the nrow/ncol\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Footnotes\n\nPandoc supports numbering and formatting footnotes.\n\n## Inline footnotes\n\n    Here is an inline note.^[Inlines notes are easier to write,\n    since you don't have to pick an identifier and move down to\n    type the note.]\n\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\n\n## Inline footnotes\n\n```\nHere is an footnore reference[^1]\n\n[^1]: This can be easy in some situations when you have a really long note or\ndon't want to inline complex outputs.\n```\n\n. . .\n\nHere is an footnore reference[^1]\n\n[^1]: This can be easy in some situations when you have a really long note or\ndon't want to inline complex outputs.\n\n. . .\n\nNotice in both situations that the footnote is placed at the bottom of the page in presentations, whereas in a document it would be hoverable or at the end of the document.\n\n## Cross References\n\nCross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables.\n\n    ![Elephant](elephant.png){#fig-elephant}\n\n. . .\n\nThe presence of the caption (`Elephant`) and label (`#fig-elephant`) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\n\n    See @fig-elephant for an illustration.\n\n. . .\n\n![](https://quarto.org/docs/authoring/images/crossref-figure.png){width=\"800px\"}\n\n## Diagrams w/ `mermaid`\n\n````\n```{{mermaid}}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n````\n\n![](images/mermaid.jpeg)\n\n. . .\n\n[Mermaid example](https://mermaid.live/edit#pako:eNqVVFFvmzAQ_iuWo0ybBBWpRDbQFKkJSV86qUofSx8MPoIbYzNjllUk_72A44RFndqChM7ffff5fHemwamkgEO8UaTM0d06FuMxSjmpqgiyWFjLQHNeA0ollypEI98nfjZ1MsZ5OMom3etUWsktuDtGdR5el3-PQHgiS6HdHbBNrsNEcnq5wRroSZ9k3tQPjvrggQ_J__UN-VLu11ktDaaTwP9gtpb8Trb3RFCZnrbwgh9e4n0wYUO-VFwxbgs8mnz3_QDeytiW863o68-ExwK1z83XjIQZcVsquN04oKvfBf2G3Ct3huZNY7y9YyuYVl9EUpX953AwCnPDXQyEUKtgnAvjjJqmNPXaMZ3_TNTsriaopWpQlRWKkOvO9mgNpVR6j5aPg8xKmjnovB7a7k4q-jSUuFdQgdBEMyn2aPWo4A8Q_lz9E1XKHahSMqHRRbB8hlRXe3R7TGDDZdLWsrcTKbeoP_5TV8Hx-EG_cOjMvgno5nxXLDQ_TbdFFnZALRANR8qCS2d17qwFbwfNxg4uQBWE0fYKN90ZYqxzKCDGYWtSyEjNdYxjcWipdUmJhiVlWiocalWDg0mt5cOLSO3acCJG2h9CYcDDK9A0Zlk) and [Mermaid.js documentation](https://mermaid-js.github.io/mermaid/#/flowchart)","srcMarkdownNoYaml":"\n\n# 02 - Authoring Quarto {background-color=\"#447099\" background-image=\"images/typewriter.jpg\" background-size=\"cover\"}\n\n```{r}\n#| include: false\nlibrary(countdown)\ncountdown_timer <- function(\n    minutes = 1, \n    play_sound = TRUE, \n    font_size = \"2em\", \n    ...\n) {\n  countdown(\n    minutes = minutes,\n    # Fanfare when it's over\n    play_sound = play_sound,\n    # Set timer theme to match solarized colors\n    color_border              = \"#404041\",\n    color_text                = \"white\",\n    color_background = \"#447099\",\n    color_running_background  = \"#72994E\",\n    color_running_text        = \"white\",\n    color_finished_background = \"#EE6331\",\n    color_finished_text       = \"white\",\n    font_size = font_size,\n    ...\n  )\n}\n```\n\n## Quarto, anatomy\n\n1.  Metadata: YAML\n\n2.  Text: Markdown\n\n3.  Code: `knitr` or `jupyter`\n\n. . .\n\nAdd it all together, and you have beautiful, powerful, and useful outputs!\n\n```{r include=FALSE}\nlibrary(tidyverse)\n```\n\n\n## Literate programming\n\n> Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)\n\n    ---\n    title: \"ggplot2 demo\"\n    date: \"5/22/2021\"\n    format: html\n    ---\n\n    ## Air Quality\n\n    There is a relationship between temperature and the ozone level.\n\n    ```{{r}}\n    #| label: fig-airquality\n    library(ggplot2)\n    ggplot(airquality, aes(Temp, Ozone)) + \n      geom_point() + \n      geom_smooth(method = \"loess\"\n    )\n    ```\n\n. . .\n\n::: {style=\"background: #a13c6530; width: 400px; height: 145px; margin: 5px; position: absolute; top: 245px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #fa551c30; width: 900px; height: 110px; margin: 5px; position: absolute; top: 405px; left: 0px;\"}\n:::\n\n. . .\n\n::: {style=\"background: #6a9c4230; width: 550px; height: 210px; margin: 5px; position: absolute; top: 520px; left: 0px;\"}\n:::\n\n# 1 Metadata {background-color=\"#a13c65\"}\n\n## Metadata: YAML\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\"\n\n``` yaml\n---\nkey: value\n---\n```\n\n## Output Options\n\n``` yaml\n---\nformat: something\n---\n```\n\n. . .\n\n``` yaml\n---\nformat: html\n---\n```\n\n``` yaml\n---\nformat: pdf\n---\n```\n\n``` yaml\n---\nformat: revealjs\n---\n```\n\n. . .\n\nThen add option arguments!\n\n``` yaml\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n. . .\n\nSub-options should be below the main format output and spacing matters!\n\n``` yaml\n---\nformat: \n  html:\n    option1: text\n    option2: logical\n---\n```\n\n## YAML for `format: html`\n\n</iframe>\n\n## YAML is sensitive\n\n``` yaml\n---\nformat:html # invalid, no space between\n---\n\n---\nformat: # invalid, read as missing\nhtml\n---\n\n---\nformat: \n  html: # valid but needs next object\n---\n```\n\n. . .\n\nValid YAML can look a bit differently based on what all is needed\n\n``` yaml\nformat: html # valid - there's a space\n\nformat:\n  html # valid - there's 2x spaces on a new line and no trailing :\n\n# valid - format = HTML with selections made\nformat: \n  html:\n    toc: true\n```\n\n## Why YAML?\n\nTo avoid manually typing out all the options, every time!\n\n. . .\n\n```bash\nquarto render document.qmd --to html\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code-fold:true\n```\n\n<br>\n\n. . .\n\n```bash\nquarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3\n```\n\n# Demo: Navigating within RStudio {background-color=\"black\"}\n\n## Quarto workflow\n\nExecuting the Quarto Render button in RStudio will call Quarto render in a background job - this will prevent Quarto rendering from cluttering up the R console, and gives you and easy way to stop.\n\n![](images/background-job.png)\n\n## Rendering\n\n1. Render in RStudio, starts a background job and previews the output  \n\n![](https://quarto.org/docs/tools/images/rstudio-render.png)\n\n. . .\n\n2. System shell via `quarto render`\n\n```{bash}\n#| eval: false\n#| echo: true\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n\n- Renders via terminal\n\n. . .\n\n3. R console via `quarto` R package\n\n```{r}\n#| eval: false\n#| echo: true\nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio and `materials/workshop/visual-editor.qmd`\n- Compare behavior of rendering from RStudio > Render, using the CLI with `quarto render`, and in R console via `quarto::quarto_render()`\n\n```{R}\n#| echo: false\n\ncountdown_timer(2)\n```\n\n\n\n## Quarto linting\n\n> Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. - [Lint](https://en.wikipedia.org/wiki/Lint_(software)#:~:text=Lint%2C%20or%20a%20linter%2C%20is,examined%20C%20language%20source%20code.)\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/lint-rstudio.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/lint-vscode.png)\n:::\n:::\n\n## Quarto YAML Intelligence\n\nRStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.\n\n![](images/quarto-tab-complete.png)\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open a new Quarto document in RStudio\n-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options\n-   Try out the tab-completion of any options you remember\n\n```{R}\n#| echo: false\ncountdown_timer(2)\n```\n\n## HTML options\n\n[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)\n\nYou can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) if needed.\n\n# Text & Markdown {background-color=\"#fa551c70\"}\n\n## Lists {.smaller}\n\n+-------------------------------------+---------------------------------+\n| Markdown Syntax                     | Output                          |\n+=====================================+=================================+\n|     * unordered list                | -   unordered list              |\n|         + sub-item 1                |                                 |\n|         + sub-item 2                |     -   sub-item 1              |\n|             - sub-sub-item 1        |                                 |\n|                                     |     -   sub-item 2              |\n|                                     |                                 |\n|                                     |         -   sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     *   item 2                      | -   item 2                      |\n|                                     |                                 |\n|         Continued (indent 4 spaces) |     Continued (indent 4 spaces) |\n+-------------------------------------+---------------------------------+\n|     1. ordered list                 | 1.  ordered list                |\n|     2. item 2                       |                                 |\n|         i) sub-item 1               | 2.  item 2                      |\n|              A.  sub-sub-item 1     |                                 |\n|                                     |     i.  sub-item 1              |\n|                                     |                                 |\n|                                     |         A.  sub-sub-item 1      |\n+-------------------------------------+---------------------------------+\n|     (@)  A list whose numbering     | 1.  A list whose numbering      |\n|                                     |                                 |\n|     continues after                 | continues after                 |\n|                                     |                                 |\n|     (@)  an interruption            | 2.  an interruption             |\n+-------------------------------------+---------------------------------+\n|     term                            | **term**                        |\n|     : definition                    |                                 |\n|                                     | :   definition                  |\n+-------------------------------------+---------------------------------+\n\n## Text Formatting\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+---------------------+-----------------+\n| Markdown Syntax     | Output          |\n+=====================+=================+\n|     # Header 1      | # Header 1      |\n+---------------------+-----------------+\n|     ## Header 2     | ## Header 2     |\n+---------------------+-----------------+\n|     ### Header 3    | ### Header 3    |\n+---------------------+-----------------+\n|     #### Header 4   | #### Header 4   |\n+---------------------+-----------------+\n|     ##### Header 5  | ##### Header 5  |\n+---------------------+-----------------+\n|     ###### Header 6 | ###### Header 6 |\n+---------------------+-----------------+\n\n## Links\n\n- There are several types of \"links\" or hyperlinks.\n\n::: columns\n::: {.column width=\"50%\"}\n#### Markdown\n```markdown\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to \n[other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an\ninline image: ![Boston terrier](images/howard-gentleman.jpeg).\n```\n:::\n::: {.column width=\"50%\" .fragment}\n#### Output\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to  [other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an inline image:  \n![Boston terrier](images/howard-gentleman.jpeg){style=\"width:250px;\"}\n:::\n:::\n\n## Tables\n\n::: columns\n::: {.column width=\"50%\"}\n    | Right | Left | Default | Center |\n    |------:|:-----|---------|:------:|\n    |   12  |  12  |    12   |    12  |\n    |  123  |  123 |   123   |   123  |\n    |    1  |    1 |     1   |     1  |\n:::\n\n::: {.column width=\"50%\" .fragment}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|    12 | 12   | 12      |   12   |\n|   123 | 123  | 123     |  123   |\n|     1 | 1    | 1       |   1    |\n:::\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/markdown-syntax.qmd`\n-   Explore, add to it, try out new syntax, discuss with your neighbor\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Grid tables\n\n    +---------------+---------------+--------------------+\n    | Fruit         | Price         | Advantages         |\n    +===============+===============+====================+\n    | Bananas       | $1.34         | - built-in wrapper |\n    |               |               | - bright color     |\n    +---------------+---------------+--------------------+\n    | Oranges       | $2.10         | - cures scurvy     |\n    |               |               | - tasty            |\n    +---------------+---------------+--------------------+\n\n    : Sample grid table.\n\n+---------------+---------------+----------------------+\n| Fruit         | Price         | Advantages           |\n+===============+===============+======================+\n| Bananas       | \\$1.34        | -   built-in wrapper |\n|               |               | -   bright color     |\n+---------------+---------------+----------------------+\n| Oranges       | \\$2.10        | -   cures scurvy     |\n|               |               | -   tasty            |\n+---------------+---------------+----------------------+\n\n: Sample grid table.\n\n## Grid table, alignment\n\nAlignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:\n\n    +---------------+---------------+--------------------+\n    | Right         | Left          | Centered           |\n    +==============:+:==============+:==================:+\n    | Bananas       | $1.34         | built-in wrapper   |\n    +---------------+---------------+--------------------+\n\nFor headerless tables, the colons go on the top line instead:\n\n    +--------------:+:--------------+:------------------:+\n    | Right         | Left          | Centered           |\n    +---------------+---------------+--------------------+\n\nNote that grid tables are quite awkward to write with a plain text editor (because unlike pipe tables, the column indicators must align). The RStudio IDE's Quarto Visual Editor can assist in making these tables.\n\n## Tables from code\n\n`knitr` itself can turn R dataframes into tables with `knitr::kable()`\n\n> A very simple table generator, and it is simple by design. It is not intended to replace any other R packages for making tables. . . .\n\n```{r}\nhead(mtcars) |> \n  knitr::kable()\n```\n\n\n## Quotes\n\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming ^[\"Literate Programming\", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)]\n\n. . .\n\n```markdown\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming\n```\n\n. . .\n\n> I like dogs  \n> And I like cats\n\n. . .\n\n```markdown\n> I like dogs\n> And I like cats\n```\n\n# Code\n\n## Anatomy of a code chunk\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````md\n```{{r}}\n#| label: car-stuff\n#| echo: false\nmtcars %>% \n  distinct(cyl)\n```\n````\n\n:::\n\n::: {.column width=\"50%\" .fragment}\n\n- Has 3x backticks on each end ```` ``` ````  \n- Indicate engine (`r`) between curly braces `{r}`  \n- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  \n\n:::\n\n::::\n\n## Code\n\nThe way you treat code is very different for different contexts\n\n. . .\n\nIn a teaching scenario like today, I *really* want to display code\n\n. . .\n\nIn a business, you may want to have a data-science facing output which displays the source code AND a stakeholder-facing output which hides the code\n\n## Code\n\nIf you simply want code highlighting, you can use 3x backticks + the language ```` ```r ````\n\n. . .\n\n    ```r\n    head(mtcars)\n    ```\n\n. . .\n\n<br> Which returns the below but is not executed since there aren't `{}` around the language:\n\n``` r\nhead(mtcars)\n```\n\n. . .\n\nIf you instead want to see source code and evaluate it, you could use `echo: true` where `echo: false` would instead hide the code but still evaluate it.\n\n    ```{{r}}\n    #| echo: true\n    1 + 1\n    ```\n\n<br>\n\n. . .\n\n```{r}\n#| echo: true\n1 + 1\n```\n\n## Code\n\nIn some scenarios you want to both execute the code and return the FULL code including backticks, like today where I'm teaching! `echo: fenced` is a great option for this.\n\n. . .\n\n    ```{{r}}\n    #| echo: fenced\n    1 + 1\n    ```\n\n. . .\n\n<br>\n\n```{r}\n#| echo: fenced\n1 + 1\n```\n\n## Code\n\nIf you want to, you may return purely decorative code which is not executed\n\n    ````\n    ```{{{r}}}\n    1 + 1\n    ```\n    ````\n\n. . .\n\nRendered as the below and not evaluated:\n\n    ```{{r}}\n    1 + 1\n    ```\n\n. . .\n\nThe general rule here is that if you want to return code verbatim, you need to have at least N + 1 on the backticks. So for a normal 3x backtick chunk... you'll need?\n\n## Divs and Spans\n\nPandoc and therefore Quarto can parse [\"fenced `Div` blocks\"](https://pandoc.org/MANUAL.html#divs-and-spans)\n\n. . .\n\n    ::: {.border}\n    This content can be styled with a border\n    :::\n\n. . .\n\n::: {style=\"border-left:10px solid red\"}\nThis content can be styled with a border\n:::\n\n    This is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nThis is text with [special]{style=\"color:red;\"} formatting.\n\n. . .\n\nYou're not limited to HTML/CSS concepts - Pandoc and Quarto also have \"attributes\" that can be assigned in this way.\n\n### Divs and Spans\n\n-   You can think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF\n-   Similarly, `[text]{.class}` spans can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.\n\n. . .\n\nThe following, if specifying a Quarto class can often apply between formats.\n\n``` code\n::: {.unnumbered .unlisted}\nText\n:::\n```\n\n. . .\n\nWhile the following is hard-coded as HTML.\n\n``` html\n<div style=\"font-size: 200px;\">Text</div>\n```\n\n## Callout Blocks\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including: \n    `note`, `tip`, `warning`, `caution`, and `important`.\n    :::\n\n::: callout-note\n## Note\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n::: callout-warning\n## Warning\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n:::\n\n::: callout-important\n## This is important\n\nDanger, callouts will really improve your writing.\n:::\n\n::: callout-tip\n## Tip with caption\n:::\n\n::: callout-caution\n## Caution, under construction\n\nHere is something under construction\n:::\n\n## Callout markdown syntax\n\n    :::{.callout-note}\n    Note that there are five types of callouts, including:\n    `note`, `warning`, `important`, `tip`, and `caution`.\n    :::\n\n\n    :::{.callout-tip}\n    ## Tip With Caption\n\n    This is an example of a callout with a caption.\n    :::\n\n<br> <br>\n\n    :::{.callout-caution collapse=\"true\"}\n    ## Expand To Learn About Collapse\n\n    This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n    :::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/callout-boxes.qmd`\n-   Try changing the types of callouts/remove them from code boxes and then render\n-   Open `materials/workshop/02-authoring/callout-pdf.qmd` and render it as well\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Figures\n\nBasic markdown syntax:\n\n    ![Boston Terrier](images/boston-terrier.png)\n\n![Boston Terrier](images/boston-terrier.png)\n\n## Figures w/ code\n\n```{r}\n#| echo: fenced\n#| fig-width: 4\n#| fig-align: right\n\nknitr::include_graphics(\"images/howard-gentleman.jpeg\")\n```\n\n## Fragments/spans\n\n::: columns\n::: {.column width=\"50%\"}\n    ![Boston terrier](images/boston-terrier.png){fig-align=\"left\"}\n\n![](images/boston-terrier.png)\n:::\n\n::: {.column width=\"50%\"}\n    ![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n\n![](images/boston-terrier.png){fig-align=\"right\" fig-alt=\"A photo a Boston Terrier.\"}\n:::\n:::\n\n## Subfigures fenced div class\n\n    ::: {#fig-bostons layout-ncol=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    Two states of Howard\n\n    :::\n\n## Subfigures\n\n::: {#fig-bostons layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\nTwo states of Howard\n:::\n\n## Subfigures\n\n<iframe src=\"static/sub-figure.html\" height=\"800px\" width=\"1200px\">\n\n</iframe>\n\n## Paths\n\nQuarto documents reference from their existing folder/directory.\n\n. . .\n\nYou can reference sub-directories/folders easily:\n\n`![](images/image.png)`\n\n. . .\n\nBut what about going \"backwards\" i.e. to a parent directory?\n\nThis specific slide-deck is at `\"get-started-quarto/materials/02-authoring.qmd\"`\n\n. . .\n\nHow to reference a image/file in parent directory i.e. `\"materials/`?\n\n\n## Absolute vs Relative:\n\nIn places like markdown, YAML, or the command line/shell/terminal you'll need to use absolute or relative file paths:\n\n. . .\n\nAbsolute = BAD: `\"/Users/thomasmock/get-started-quarto\"` - who's computer will this work on?\n\n```{r}\nlist.files(\"/Users/thomasmock/get-started-quarto\")\n```\n\n## Relative file paths\n\nBetter, HTML style relative paths: `\"../` = up one directory - `../../` = up two directories and so forth \n\n- `/..` or `/` = start from `root` directory of your current computer\n\n```{r}\nlist.files(\"../\")\n```\n\n. . .\n\n`\"~/get-started-quarto/\"` where \"\\~\" is a shortcut for your home directory (like `thomasmock` on my computer)\n\n```{r}\nlist.files(\"~/get-started-quarto/\")\n```\n\n## Mental Model\n\nWorking left to right (parent to child)\n\n```{r}\nlist.files(\"~/get-started-quarto/materials\")\n```\n\n. . .\n\nWorking right to left (child to parent)\n\n```{r}\nlist.files(\"../materials\")\n```\n\n\n## Referencing paths in R code\n\nIn code you can use `here::here()`:\n\n> The goal of the `here` package is to enable easy file referencing in project-oriented workflows\n\n```{r}\nlist.files(here::here())\n```\n\n`here()` always starts at the top-level directory of a `.RProj`\n\n## `here::here()`\n\n```{r}\nhere::here()\n```\n\n. . .\n\n```{r}\nlist.files(here::here())\n```\n\n\n## `here::here()`\n\n```{r}\nfs::file_info(\"preview.jpeg\") |>  select(1:3)\n```\n\n. . .\n\n```{r}\nfs::file_info(here::here(\"preview.jpeg\")) |>  select(1:3)\n```\n\n. . .\n\n<br>\n\n\n```{r}\nfs::file_info(here::here(\"materials/images/howard-gentleman.jpeg\")) |>  select(1:3)\n```\n\n<br>\n\n```{r}\n# this also works\nfs::file_info(here::here(\"materials\", \"images\", \"howard-gentleman.jpeg\")) |>  select(1:3)\n\n```\n\n\n\n## Navigating in the terminal\n\nBecause Quarto is a command line interface (CLI), there are times you'll need to use it via the terminal. A great overview of using the command line and navigating files/directories is available via the [Data Carpentries](https://datacarpentry.org/shell-genomics/02-the-filesystem/index.html) or a great interactive tool for understanding commands: <https://tldr.ostera.io>\n\n. . .\n\n+------------------------------------+-------------------------------------------------------+\n| Command                            | Action                                                |\n+====================================+=======================================================+\n| `pwd`                              | Print name of current working directory               |\n+------------------------------------+-------------------------------------------------------+\n| `cd`                               | Change current working directory                      |\n+------------------------------------+-------------------------------------------------------+\n| `ls`                               | List directory contents                               |\n+------------------------------------+-------------------------------------------------------+\n| `quarto --help`                    | Return `quarto` help docs                             |\n+------------------------------------+-------------------------------------------------------+\n| `mkdir howdy`                      | Make a new folder/directory called \"howdy\"            |\n+------------------------------------+-------------------------------------------------------+\n| `rm howdy/some-file.qmd` \\| Remove | a file called `some-file.qmd` from the \"howdy\" folder |\n+------------------------------------+-------------------------------------------------------+\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Our Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Navigate to a file with the \"cheat code\" <kbd>Ctrl + I</kbd> and then edit\n\n-   Open `materials/workshop/02-authoring/figure-layout.qmd`\n\n-   To reference other directories:\n\n-   Correct the image links:\n\n-   Use `here::here(\"path/to/content\")` in code\n\n-   Use `[](~/ProjectDir/path/to/content)` in markdown\n\n-   Use `../../path/to/content` in YAML or in Markdown\n\n```{R}\n#| echo: false\ncountdown_timer(5)\n```\n\n## Subfigures\n\n    ::: {#fig-bostons layout-nrow=2}\n\n    ![Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){#fig-boston width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){#fig-sleep width=\"250px\"}\n\n    :::\n\n## Subfigures\n\n::: {layout-nrow=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n:::\n\nTwo states of Howard, twice\n\n## Subfigures\n\n    ::: {layout-ncol=\"2\"}\n    ![Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    ![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n    ![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\n    Two states of Howard, twice\n    :::\n\n::: {layout-ncol=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Still sleeping](images/boston-sleep.png){width=\"250px\"}\n\nTwo states of Howard, twice\n:::\n\n## Figure Divs\n\nNote that the last paragraph in the div block is used as the figure caption.\n\n``` code\n::: {#fig-dog}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U-WQ277UZtY\"></iframe>\n\nFunny boston terrier videos\n:::\n```\n\n::: {#fig-dog-youtube}\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/U-WQ277UZtY\">\n\n</iframe>\n\nFunny boston terrier videos\n:::\n\n## Figure Divs\n\n::: {layout-nrow=\"2\"}\n![Excited](images/boston-terrier.png){width=\"250px\"}\n\n![Sleeping](images/boston-sleep.png){width=\"250px\"}\n\n![Still Excited](images/boston-terrier.png){width=\"250px\"}\n\n::: {#fig-dog-embed}\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWR9gwxW-4k\">\n\n</iframe>\n\nFunny boston terrier videos\n:::\n:::\n\n# `r fontawesome::fa(\"laptop-code\", \"white\")` Your Turn {background-color=\"#447099\" transition=\"slide-in\"}\n\n-   Open `materials/workshop/02-authoring/figure-layout-2.qmd`\n-   Try out the various types of subfigures, chahing the nrow/ncol\n\n```{R}\n#| echo: false\ncountdown_timer(3)\n```\n\n## Footnotes\n\nPandoc supports numbering and formatting footnotes.\n\n## Inline footnotes\n\n    Here is an inline note.^[Inlines notes are easier to write,\n    since you don't have to pick an identifier and move down to\n    type the note.]\n\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\n\n## Inline footnotes\n\n```\nHere is an footnore reference[^1]\n\n[^1]: This can be easy in some situations when you have a really long note or\ndon't want to inline complex outputs.\n```\n\n. . .\n\nHere is an footnore reference[^1]\n\n[^1]: This can be easy in some situations when you have a really long note or\ndon't want to inline complex outputs.\n\n. . .\n\nNotice in both situations that the footnote is placed at the bottom of the page in presentations, whereas in a document it would be hoverable or at the end of the document.\n\n## Cross References\n\nCross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables.\n\n    ![Elephant](elephant.png){#fig-elephant}\n\n. . .\n\nThe presence of the caption (`Elephant`) and label (`#fig-elephant`) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\n\n    See @fig-elephant for an illustration.\n\n. . .\n\n![](https://quarto.org/docs/authoring/images/crossref-figure.png){width=\"800px\"}\n\n## Diagrams w/ `mermaid`\n\n````\n```{{mermaid}}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n````\n\n![](images/mermaid.jpeg)\n\n. . .\n\n[Mermaid example](https://mermaid.live/edit#pako:eNqVVFFvmzAQ_iuWo0ybBBWpRDbQFKkJSV86qUofSx8MPoIbYzNjllUk_72A44RFndqChM7ffff5fHemwamkgEO8UaTM0d06FuMxSjmpqgiyWFjLQHNeA0ollypEI98nfjZ1MsZ5OMom3etUWsktuDtGdR5el3-PQHgiS6HdHbBNrsNEcnq5wRroSZ9k3tQPjvrggQ_J__UN-VLu11ktDaaTwP9gtpb8Trb3RFCZnrbwgh9e4n0wYUO-VFwxbgs8mnz3_QDeytiW863o68-ExwK1z83XjIQZcVsquN04oKvfBf2G3Ct3huZNY7y9YyuYVl9EUpX953AwCnPDXQyEUKtgnAvjjJqmNPXaMZ3_TNTsriaopWpQlRWKkOvO9mgNpVR6j5aPg8xKmjnovB7a7k4q-jSUuFdQgdBEMyn2aPWo4A8Q_lz9E1XKHahSMqHRRbB8hlRXe3R7TGDDZdLWsrcTKbeoP_5TV8Hx-EG_cOjMvgno5nxXLDQ_TbdFFnZALRANR8qCS2d17qwFbwfNxg4uQBWE0fYKN90ZYqxzKCDGYWtSyEjNdYxjcWipdUmJhiVlWiocalWDg0mt5cOLSO3acCJG2h9CYcDDK9A0Zlk) and [Mermaid.js documentation](https://mermaid-js.github.io/mermaid/#/flowchart)"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","self-contained":true,"css":["theme/theme.css"],"output-file":"02-authoring.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.554","auto-stretch":true,"editor":"source","slideNumber":true,"width":1920,"height":1080,"logo":"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png","footer":"[Get started with Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/)","theme":"simple"}}},"projectFormats":["html"]}